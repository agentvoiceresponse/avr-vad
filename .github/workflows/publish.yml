name: Publish to NPM

on:
  push:
    branches:
      - master
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci --omit=optional
        env:
          # Disable GPU support for onnxruntime-node
          ORT_DISABLE_DNNL: 1
          ORT_TENSORRT_UNAVAILABLE: 1
          # Force CPU-only installation
          ONNXRUNTIME_PREFER_CPU: 1
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests
        run: npm test
        
      - name: Build project
        run: npm run build
        
      - name: Test ONNX Runtime installation
        run: npm run test-onnx
        
      - name: Check if version has been updated
        id: check-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view avr-vad version 2>/dev/null || echo "0.0.0")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version updated: $PUBLISHED_VERSION ‚Üí $CURRENT_VERSION"
          else
            echo "version-changed=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Version unchanged: $CURRENT_VERSION"
          fi
        
      - name: Publish to NPM
        if: steps.check-version.outputs.version-changed == 'true' && matrix.node-version == '20.x'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        if: steps.check-version.outputs.version-changed == 'true' && matrix.node-version == '20.x'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.check-version.outputs.current-version }}
          release_name: Release v${{ steps.check-version.outputs.current-version }}
          body: |
            üöÄ New release of avr-vad library
            
            **Version:** ${{ steps.check-version.outputs.current-version }}
            **Previous:** ${{ steps.check-version.outputs.published-version }}
            
            This release has been automatically published to npm.
            
            Install with:
            ```bash
            npm install avr-vad@${{ steps.check-version.outputs.current-version }}
            ```
          draft: false
          prerelease: false 